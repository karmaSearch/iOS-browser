// -*- mode: Swift -*-

// AUTOGENERATED BY glean_parser v6.3.0. DO NOT EDIT. DO NOT COMMIT.

#if canImport(Foundation)
    import Foundation
#endif

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */



import Glean

// swiftlint:disable superfluous_disable_command
// swiftlint:disable nesting
// swiftlint:disable line_length
// swiftlint:disable identifier_name
// swiftlint:disable force_try

extension GleanMetrics {
    class GleanBuild {
        private init() {
            // Intentionally left private, no external user can instantiate a new global object.
        }

        public static let info = BuildInfo(buildDate: DateComponents(calendar: Calendar.current, timeZone: TimeZone(abbreviation: "UTC"), year: 2022, month: 11, day: 30, hour: 13, minute: 34, second: 46))
    }

    enum Sync {
        /// Unique identifier for this sync, used to correlate together individual pings
        /// for data types that were synchronized together (history, bookmarks, logins, and
        /// tabs). If a data type is synchronized by itself via the legacy 'sync' API (as
        /// opposed to the Sync Manager), then this field will not be set on the
        /// corresponding ping.
        static let syncUuid = UuidMetricType( // generated from sync.sync_uuid
            CommonMetricData(
                category: "sync",
                name: "sync_uuid",
                sendInPings: ["temp-bookmarks-sync", "temp-history-sync", "temp-logins-sync", "temp-rust-tabs-sync", "temp-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        private static let failureReasonLabel = CounterMetricType( // generated from sync.failure_reason
            CommonMetricData(
                category: "sync",
                name: "failure_reason",
                sendInPings: ["temp-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records why sync failed.
        static let failureReason = try! LabeledMetricType<CounterMetricType>( // generated from sync.failure_reason
            category: "sync",
            name: "failure_reason",
            sendInPings: ["temp-sync"],
            lifetime: .ping,
            disabled: false,
            subMetric: failureReasonLabel,
            labels: ["httperror", "othererror", "sqlerror", "unexpectederror"]
        )

    }

    enum HistorySync {
        /// The user's hashed Firefox Account ID.
        static let uid = StringMetricType( // generated from history_sync.uid
            CommonMetricData(
                category: "history_sync",
                name: "uid",
                sendInPings: ["temp-history-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        private static let incomingLabel = CounterMetricType( // generated from history_sync.incoming
            CommonMetricData(
                category: "history_sync",
                name: "incoming",
                sendInPings: ["temp-history-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records incoming history record counts. `applied` is the number of incoming
        /// history pages that were successfully stored or updated in the local database.
        /// `failed_to_apply` is the number of pages that were ignored due to errors.
        /// `reconciled` is the number of pages with new visits locally and remotely, and
        /// had their visits merged.
        static let incoming = try! LabeledMetricType<CounterMetricType>( // generated from history_sync.incoming
            category: "history_sync",
            name: "incoming",
            sendInPings: ["temp-history-sync"],
            lifetime: .ping,
            disabled: false,
            subMetric: incomingLabel,
            labels: ["applied", "failed_to_apply", "reconciled"]
        )

        private static let outgoingLabel = CounterMetricType( // generated from history_sync.outgoing
            CommonMetricData(
                category: "history_sync",
                name: "outgoing",
                sendInPings: ["temp-history-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records outgoing history record counts. `uploaded` is the number of records
        /// that were successfully sent to the server. `failed_to_upload` is the number of
        /// records that weren't uploaded, and will be retried on the next sync.
        static let outgoing = try! LabeledMetricType<CounterMetricType>( // generated from history_sync.outgoing
            category: "history_sync",
            name: "outgoing",
            sendInPings: ["temp-history-sync"],
            lifetime: .ping,
            disabled: false,
            subMetric: outgoingLabel,
            labels: ["failed_to_upload", "uploaded"]
        )

        private static let failureReasonLabel = CounterMetricType( // generated from history_sync.failure_reason
            CommonMetricData(
                category: "history_sync",
                name: "failure_reason",
                sendInPings: ["temp-history-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records why the history sync failed.
        static let failureReason = try! LabeledMetricType<CounterMetricType>( // generated from history_sync.failure_reason
            category: "history_sync",
            name: "failure_reason",
            sendInPings: ["temp-history-sync"],
            lifetime: .ping,
            disabled: false,
            subMetric: failureReasonLabel,
            labels: ["backoff", "format_outdated", "format_too_new", "no_account", "offline", "red_light", "remotely_not_enabled", "state_machine_not_ready", "storage_format_outdated", "storage_format_too_new", "unknown"]
        )

    }

    enum LoginsSync {
        /// The user's hashed Firefox Account ID.
        static let uid = StringMetricType( // generated from logins_sync.uid
            CommonMetricData(
                category: "logins_sync",
                name: "uid",
                sendInPings: ["temp-logins-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        private static let incomingLabel = CounterMetricType( // generated from logins_sync.incoming
            CommonMetricData(
                category: "logins_sync",
                name: "incoming",
                sendInPings: ["temp-logins-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records incoming passwords record counts. `applied` is the number of incoming
        /// passwords entries that were successfully stored or updated in the local
        /// database. `failed_to_apply` is the number of entries that were ignored due to
        /// errors. `reconciled` is the number of entries with changes both locally and
        /// remotely that were merged.
        static let incoming = try! LabeledMetricType<CounterMetricType>( // generated from logins_sync.incoming
            category: "logins_sync",
            name: "incoming",
            sendInPings: ["temp-logins-sync"],
            lifetime: .ping,
            disabled: false,
            subMetric: incomingLabel,
            labels: ["applied", "failed_to_apply", "reconciled"]
        )

        private static let outgoingLabel = CounterMetricType( // generated from logins_sync.outgoing
            CommonMetricData(
                category: "logins_sync",
                name: "outgoing",
                sendInPings: ["temp-logins-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records outgoing passwords record counts. `uploaded` is the number of records
        /// that were successfully sent to the server. `failed_to_upload` is the number of
        /// records that weren't uploaded, and will be retried on the next sync.
        static let outgoing = try! LabeledMetricType<CounterMetricType>( // generated from logins_sync.outgoing
            category: "logins_sync",
            name: "outgoing",
            sendInPings: ["temp-logins-sync"],
            lifetime: .ping,
            disabled: false,
            subMetric: outgoingLabel,
            labels: ["failed_to_upload", "uploaded"]
        )

        private static let failureReasonLabel = CounterMetricType( // generated from logins_sync.failure_reason
            CommonMetricData(
                category: "logins_sync",
                name: "failure_reason",
                sendInPings: ["temp-logins-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records why the passwords sync failed.
        static let failureReason = try! LabeledMetricType<CounterMetricType>( // generated from logins_sync.failure_reason
            category: "logins_sync",
            name: "failure_reason",
            sendInPings: ["temp-logins-sync"],
            lifetime: .ping,
            disabled: false,
            subMetric: failureReasonLabel,
            labels: ["backoff", "format_outdated", "format_too_new", "no_account", "offline", "red_light", "remotely_not_enabled", "state_machine_not_ready", "storage_format_outdated", "storage_format_too_new", "unknown"]
        )

    }

    enum BookmarksSync {
        /// The user's hashed Firefox Account ID.
        static let uid = StringMetricType( // generated from bookmarks_sync.uid
            CommonMetricData(
                category: "bookmarks_sync",
                name: "uid",
                sendInPings: ["temp-bookmarks-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        private static let incomingLabel = CounterMetricType( // generated from bookmarks_sync.incoming
            CommonMetricData(
                category: "bookmarks_sync",
                name: "incoming",
                sendInPings: ["temp-bookmarks-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records incoming bookmark record counts.
        static let incoming = try! LabeledMetricType<CounterMetricType>( // generated from bookmarks_sync.incoming
            category: "bookmarks_sync",
            name: "incoming",
            sendInPings: ["temp-bookmarks-sync"],
            lifetime: .ping,
            disabled: false,
            subMetric: incomingLabel,
            labels: ["applied", "failed_to_apply", "reconciled"]
        )

        private static let outgoingLabel = CounterMetricType( // generated from bookmarks_sync.outgoing
            CommonMetricData(
                category: "bookmarks_sync",
                name: "outgoing",
                sendInPings: ["temp-bookmarks-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records outgoing bookmark record counts.
        static let outgoing = try! LabeledMetricType<CounterMetricType>( // generated from bookmarks_sync.outgoing
            category: "bookmarks_sync",
            name: "outgoing",
            sendInPings: ["temp-bookmarks-sync"],
            lifetime: .ping,
            disabled: false,
            subMetric: outgoingLabel,
            labels: ["failed_to_upload", "uploaded"]
        )

        private static let failureReasonLabel = CounterMetricType( // generated from bookmarks_sync.failure_reason
            CommonMetricData(
                category: "bookmarks_sync",
                name: "failure_reason",
                sendInPings: ["temp-bookmarks-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records bookmark sync failure reasons.
        static let failureReason = try! LabeledMetricType<CounterMetricType>( // generated from bookmarks_sync.failure_reason
            category: "bookmarks_sync",
            name: "failure_reason",
            sendInPings: ["temp-bookmarks-sync"],
            lifetime: .ping,
            disabled: false,
            subMetric: failureReasonLabel,
            labels: ["backoff", "format_outdated", "format_too_new", "no_account", "offline", "red_light", "remotely_not_enabled", "state_machine_not_ready", "storage_format_outdated", "storage_format_too_new", "unknown"]
        )

    }

    enum TabsSync {
        /// The user's hashed Firefox Account ID.
        static let uid = StringMetricType( // generated from tabs_sync.uid
            CommonMetricData(
                category: "tabs_sync",
                name: "uid",
                sendInPings: ["temp-tabs-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        private static let incomingLabel = CounterMetricType( // generated from tabs_sync.incoming
            CommonMetricData(
                category: "tabs_sync",
                name: "incoming",
                sendInPings: ["temp-tabs-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records incoming tabs record counts. `applied` is the number of incoming
        /// records that were successfully stored or updated in the local database.
        /// `failed_to_apply` is the number of records that were ignored due to errors.
        /// `reconciled` is the number of merged records.
        static let incoming = try! LabeledMetricType<CounterMetricType>( // generated from tabs_sync.incoming
            category: "tabs_sync",
            name: "incoming",
            sendInPings: ["temp-tabs-sync"],
            lifetime: .ping,
            disabled: false,
            subMetric: incomingLabel,
            labels: ["applied", "failed_to_apply", "reconciled"]
        )

        private static let outgoingLabel = CounterMetricType( // generated from tabs_sync.outgoing
            CommonMetricData(
                category: "tabs_sync",
                name: "outgoing",
                sendInPings: ["temp-tabs-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records outgoing tabs record counts. `uploaded` is the number of records that
        /// were successfully sent to the server. `failed_to_upload` is the number of
        /// records that weren't uploaded, and will be retried on the next sync.
        static let outgoing = try! LabeledMetricType<CounterMetricType>( // generated from tabs_sync.outgoing
            category: "tabs_sync",
            name: "outgoing",
            sendInPings: ["temp-tabs-sync"],
            lifetime: .ping,
            disabled: false,
            subMetric: outgoingLabel,
            labels: ["failed_to_upload", "uploaded"]
        )

        private static let failureReasonLabel = CounterMetricType( // generated from tabs_sync.failure_reason
            CommonMetricData(
                category: "tabs_sync",
                name: "failure_reason",
                sendInPings: ["temp-tabs-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records why the tabs sync failed.
        static let failureReason = try! LabeledMetricType<CounterMetricType>( // generated from tabs_sync.failure_reason
            category: "tabs_sync",
            name: "failure_reason",
            sendInPings: ["temp-tabs-sync"],
            lifetime: .ping,
            disabled: false,
            subMetric: failureReasonLabel,
            labels: ["backoff", "format_outdated", "format_too_new", "no_account", "offline", "red_light", "remotely_not_enabled", "state_machine_not_ready", "storage_format_outdated", "storage_format_too_new", "unknown"]
        )

    }

    enum RustTabsSync {
        /// The user's hashed Firefox Account ID.
        static let uid = StringMetricType( // generated from rust_tabs_sync.uid
            CommonMetricData(
                category: "rust_tabs_sync",
                name: "uid",
                sendInPings: ["temp-rust-tabs-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        private static let incomingLabel = CounterMetricType( // generated from rust_tabs_sync.incoming
            CommonMetricData(
                category: "rust_tabs_sync",
                name: "incoming",
                sendInPings: ["temp-rust-tabs-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records incoming tabs record counts. `applied` is the number of incoming
        /// records that were successfully stored or updated in the local database.
        /// `failed_to_apply` is the number of records that were ignored due to errors.
        /// `reconciled` is the number of merged records.
        static let incoming = try! LabeledMetricType<CounterMetricType>( // generated from rust_tabs_sync.incoming
            category: "rust_tabs_sync",
            name: "incoming",
            sendInPings: ["temp-rust-tabs-sync"],
            lifetime: .ping,
            disabled: false,
            subMetric: incomingLabel,
            labels: ["applied", "failed_to_apply", "reconciled"]
        )

        private static let outgoingLabel = CounterMetricType( // generated from rust_tabs_sync.outgoing
            CommonMetricData(
                category: "rust_tabs_sync",
                name: "outgoing",
                sendInPings: ["temp-rust-tabs-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records outgoing tabs record counts. `uploaded` is the number of records that
        /// were successfully sent to the server. `failed_to_upload` is the number of
        /// records that weren't uploaded, and will be retried on the next sync.
        static let outgoing = try! LabeledMetricType<CounterMetricType>( // generated from rust_tabs_sync.outgoing
            category: "rust_tabs_sync",
            name: "outgoing",
            sendInPings: ["temp-rust-tabs-sync"],
            lifetime: .ping,
            disabled: false,
            subMetric: outgoingLabel,
            labels: ["failed_to_upload", "uploaded"]
        )

        private static let failureReasonLabel = CounterMetricType( // generated from rust_tabs_sync.failure_reason
            CommonMetricData(
                category: "rust_tabs_sync",
                name: "failure_reason",
                sendInPings: ["temp-rust-tabs-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records why the tabs sync failed.
        static let failureReason = try! LabeledMetricType<CounterMetricType>( // generated from rust_tabs_sync.failure_reason
            category: "rust_tabs_sync",
            name: "failure_reason",
            sendInPings: ["temp-rust-tabs-sync"],
            lifetime: .ping,
            disabled: false,
            subMetric: failureReasonLabel,
            labels: ["backoff", "format_outdated", "format_too_new", "no_account", "offline", "red_light", "remotely_not_enabled", "state_machine_not_ready", "storage_format_outdated", "storage_format_too_new", "unknown"]
        )

    }

    enum ClientsSync {
        /// The user's hashed Firefox Account ID.
        static let uid = StringMetricType( // generated from clients_sync.uid
            CommonMetricData(
                category: "clients_sync",
                name: "uid",
                sendInPings: ["temp-clients-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        private static let incomingLabel = CounterMetricType( // generated from clients_sync.incoming
            CommonMetricData(
                category: "clients_sync",
                name: "incoming",
                sendInPings: ["temp-clients-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records incoming clients record counts. `applied` is the number of incoming
        /// records that were successfully stored or updated in the local database.
        /// `failed_to_apply` is the number of records that were ignored due to errors.
        /// `reconciled` is the number of merged records.
        static let incoming = try! LabeledMetricType<CounterMetricType>( // generated from clients_sync.incoming
            category: "clients_sync",
            name: "incoming",
            sendInPings: ["temp-clients-sync"],
            lifetime: .ping,
            disabled: false,
            subMetric: incomingLabel,
            labels: ["applied", "failed_to_apply", "reconciled"]
        )

        private static let outgoingLabel = CounterMetricType( // generated from clients_sync.outgoing
            CommonMetricData(
                category: "clients_sync",
                name: "outgoing",
                sendInPings: ["temp-clients-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records outgoing clients record counts. `uploaded` is the number of records
        /// that were successfully sent to the server. `failed_to_upload` is the number of
        /// records that weren't uploaded, and will be retried on the next sync.
        static let outgoing = try! LabeledMetricType<CounterMetricType>( // generated from clients_sync.outgoing
            category: "clients_sync",
            name: "outgoing",
            sendInPings: ["temp-clients-sync"],
            lifetime: .ping,
            disabled: false,
            subMetric: outgoingLabel,
            labels: ["failed_to_upload", "uploaded"]
        )

        private static let failureReasonLabel = CounterMetricType( // generated from clients_sync.failure_reason
            CommonMetricData(
                category: "clients_sync",
                name: "failure_reason",
                sendInPings: ["temp-clients-sync"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records why the clients sync failed.
        static let failureReason = try! LabeledMetricType<CounterMetricType>( // generated from clients_sync.failure_reason
            category: "clients_sync",
            name: "failure_reason",
            sendInPings: ["temp-clients-sync"],
            lifetime: .ping,
            disabled: false,
            subMetric: failureReasonLabel,
            labels: ["backoff", "format_outdated", "format_too_new", "no_account", "offline", "red_light", "remotely_not_enabled", "state_machine_not_ready", "storage_format_outdated", "storage_format_too_new", "unknown"]
        )

    }

    class Pings {
        public static let shared = Pings()
        private init() {
            // Intentionally left private, no external user can instantiate a new global object.
        }

        /// A summary ping, sent every time a sync is performed. During each Sync one or
        /// more data types could be synchronized, depending on which data types user
        /// configured to sync. Alongside with 'sync' ping one or more individual data type
        /// specific pings will be sent. For example, if history and bookmarks data types
        /// are configured to be synchronized, the following pings will be sent: 'sync',
        /// 'history-sync' and 'bookmarks-sync'. Alternatively, if only history is
        /// configured to be synchronized then 'sync' and 'history-sync' pings will be
        /// sent. In case of a "global failure" where none of the data type syncs could
        /// even start, e.g. device is offline, only the 'sync' ping will be sent. This
        /// ping doesn't include the `client_id` because it reports a hashed version of the
        /// user's Firefox Account ID.
        let tempSync = Ping<NoReasonCodes>(
            name: "temp-sync",
            includeClientId: false,
            sendIfEmpty: false,
            reasonCodes: []
        )

        /// A ping sent for every history sync. It doesn't include the `client_id` because
        /// it reports a hashed version of the user's Firefox Account ID.
        let tempHistorySync = Ping<NoReasonCodes>(
            name: "temp-history-sync",
            includeClientId: false,
            sendIfEmpty: false,
            reasonCodes: []
        )

        /// A ping sent for every bookmarks sync. It doesn't include the `client_id`
        /// because it reports a hashed version of the user's Firefox Account ID.
        let tempBookmarksSync = Ping<NoReasonCodes>(
            name: "temp-bookmarks-sync",
            includeClientId: false,
            sendIfEmpty: false,
            reasonCodes: []
        )

        /// A ping sent for every logins/passwords sync. It doesn't include the `client_id`
        /// because it reports a hashed version of the user's Firefox Account ID.
        let tempLoginsSync = Ping<NoReasonCodes>(
            name: "temp-logins-sync",
            includeClientId: false,
            sendIfEmpty: false,
            reasonCodes: []
        )

        /// A ping sent for every Tabs engine sync. It doesn't include the `client_id`
        /// because it reports a hashed version of the user's Firefox Account ID.
        let tempTabsSync = Ping<NoReasonCodes>(
            name: "temp-tabs-sync",
            includeClientId: false,
            sendIfEmpty: false,
            reasonCodes: []
        )

        /// A ping sent for every Tabs engine sync performed by the application services
        /// tabs component. It doesn't include the `client_id` because it reports a hashed
        /// version of the user's Firefox Account ID.
        let tempRustTabsSync = Ping<NoReasonCodes>(
            name: "temp-rust-tabs-sync",
            includeClientId: false,
            sendIfEmpty: false,
            reasonCodes: []
        )

        /// A ping sent for every Clients engine sync performed by the application services
        /// clients component. It doesn't include the `client_id` because it reports a
        /// hashed version of the user's Firefox Account ID.
        let tempClientsSync = Ping<NoReasonCodes>(
            name: "temp-clients-sync",
            includeClientId: false,
            sendIfEmpty: false,
            reasonCodes: []
        )

    }

}
